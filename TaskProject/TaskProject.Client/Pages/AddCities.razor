@page "/addCities"
@inject HttpClient Http
@using Radzen 
@using TaskProject.Client.Models;
@inject NotificationService NotificationService
@inject DialogService DialogService

<h3>Add Cities</h3>

<EditForm Model="city" OnValidSubmit="AddCityAsync">
    <DataAnnotationsValidator />
    <div style="display: grid; grid-template-columns: 150px 1fr; align-items: center; gap: 10px; margin-top: 10px;">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">City Name</RadzenText>
        <RadzenTextBox @bind-Value="city.Name" Placeholder="Enter City Name" Style="width:50%;" />
    </div>
    <ValidationMessage For="@(() => city.Name)" />

    <div style="display: grid; grid-template-columns: 150px 1fr; align-items: center; gap: 10px; margin-top: 10px;">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">City Code</RadzenText>
        <RadzenTextBox @bind-Value="city.Code" Placeholder="Enter City Code" Style="width:50%;" />
    </div>

    <div style="display: grid; grid-template-columns: 150px 1fr; align-items: center; gap: 10px; margin-top: 10px;">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">City Population</RadzenText>
        <RadzenTextBox @bind-Value="city.Population" Placeholder="Enter population" Style="width:50%;" />
    </div>

    <div style="display: grid; grid-template-columns: 150px 1fr; align-items: center; gap: 10px; margin-top: 10px;">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">City Type</RadzenText>
        <RadzenTextBox @bind-Value="city.Type" Placeholder="Enter type" Style="width:50%;" />
    </div>
    <br />
    <RadzenButton Text="Add City" ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="add_circle" Style="margin-top:30px" />
    @if (isEditing)
    {
        <RadzenButton Text="Update" ButtonStyle="ButtonStyle.Primary" Click="@(args => UpdateCity(city))" Style="margin-top:30px ;margin-left:10px" />
    }
</EditForm>


 @if (cities != null && cities.Count > 0)
 {
    <RadzenDataGrid @ref="dataGrid" Data="@cities" TItem="City" Style="margin-top:30px; margin-bottom:30px">
        <Columns>
            <RadzenDataGridColumn TItem="City" Title="No." Width="40px">
                <Template Context="city">
                    @(cities.IndexOf(city) + 1)
                </Template>
            </RadzenDataGridColumn>
            @* <RadzenDataGridColumn TItem="City" Property="Id" Title="City ID" /> *@
            <RadzenDataGridColumn TItem="City" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="City" Property="Code" Title="Code" />
            <RadzenDataGridColumn TItem="City" Property="Population" Title="Population" />
            <RadzenDataGridColumn TItem="City" Property="Type" Title="Type" />

            <!-- Edit button with an icon -->
            <RadzenDataGridColumn TItem="City" Title="Edit">
                <Template Context="city">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => EditCity(city.Id))" />
            </Template>
                    </RadzenDataGridColumn>

            <!-- Delete button with an icon -->
            <RadzenDataGridColumn TItem="City" Title="Delete">
                <Template Context="city">
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger"
                                  Click="@(args => ConfirmDeleteCity(city.Id))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>No cities available.</p>
}

@code {
    private City city = new City(); // Use the City class from the client-side models
    private List<City> cities = new List<City>(); // List to hold fetched cities
    private RadzenDataGrid<City> dataGrid;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await ShowCityData(); // Fetch city data when the component is initialized
    }

    //Add cities
    private async Task AddCityAsync()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Cities", city); // API call
            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(new NotificationMessage 
                { 
                    Severity = NotificationSeverity.Success, 
                    Summary = "Success", 
                    Detail = "City added successfully!" 
                });
                city = new City(); // Clear the form
                await ShowCityData(); // Refresh the grid

            }
            else
            {
                NotificationService.Notify(new NotificationMessage 
                { 
                    Severity = NotificationSeverity.Error, 
                    Summary = "Failed", 
                    Detail = "Failed to add city. Please try again." 
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage 
            {
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = ex.Message 
            });
        }
    }

    //Show city records
    private async Task ShowCityData()
    {
        try
        {
            // Make the API call to fetch cities
            var response = await Http.GetAsync("api/Cities");
            if (response.IsSuccessStatusCode)
            {
                // Extract the JSON content and deserialize it into a List<City>
                var responseData = await response.Content.ReadFromJsonAsync<List<City>>();
                if (responseData != null && responseData.Any())
                {
                    // Update the cities list with the fetched data
                    cities = responseData;
                    // Reload the grid to display the data
                    if (dataGrid != null)
                    {
                        await dataGrid.Reload();
                    }
                }
                else
                {
                    // No data received or empty list
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Summary = "No Data",
                            Detail = "No cities available."
                        });
                }
            }
            else
            {
                // If the response failed, log the reason
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = $"Failed to fetch city data: {response.ReasonPhrase}"
                    });
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions and display an error message
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message
                });
        }
    }

    //Edit city
    private async Task EditCity(int cityId)
    {
        try
        {
            var response = await Http.GetAsync($"api/Cities/{cityId}");
            if (response.IsSuccessStatusCode)
            {
                city = await response.Content.ReadFromJsonAsync<City>();
                isEditing = true;
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Failed",
                        Detail = "Failed to get city data. Please try again."
                    });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message
                });
        }

    }

    private async Task UpdateCity(City cityToUpdate)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Cities/{cityToUpdate.Id}", cityToUpdate);
            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "City updated successfully!"
                    });
                city = new City();
                await ShowCityData(); // Refresh the grid
                isEditing = false;

            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Failed",
                        Detail = "Failed to update city. Please try again."
                    });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message
                });
        }
    } 
    //Delete city
    private async Task ConfirmDeleteCity(int cityId)
    {
        // Show confirmation dialog
        var result = await DialogService.Confirm("Are you sure you want to delete this city?", "Confirm Deletion",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        // Check the user's response
        if (result.HasValue && result.Value)
        {
            // User confirmed, proceed to delete
            await DeleteCity(cityId);
        }
        // If user clicks "No", the dialog closes and nothing happens
    }

    private async Task DeleteCity(int cityId)
    {
        Console.WriteLine($"Deleting City ID: {cityId}");

        var response = await Http.DeleteAsync($"api/Cities/{cityId}");

        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "City deleted successfully!"
                });

            // Remove the city from the local list
            cities.RemoveAll(c => c.Id == cityId);

            if (dataGrid != null)
            {
                await dataGrid.Reload();
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Failed",
                    Detail = "Failed to delete city. Please try again."
                });
        }
    }
 }
